<?php
namespace App\Services;

use App\Models\Notification;
use App\Models\User;
use Illuminate\Support\Facades\Log;

class NotificationService
{
    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Role ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
     */
    public static function notifyRole($targetRole, $type, $title, $message, $data = [], $priority = 'normal')
    {
        try {
            // ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ role ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
            $users = User::where('role', $targetRole)->get();

            foreach ($users as $user) {
                Notification::create([
                    'user_id' => $user->id,
                    'target_role' => $targetRole,
                    'type' => $type,
                    'title' => $title,
                    'message' => $message,
                    'data' => $data,
                    'priority' => $priority
                ]);
            }

            Log::info('Notification sent to role', [
                'target_role' => $targetRole,
                'type' => $type,
                'user_count' => $users->count()
            ]);

            return true;
        } catch (\Exception $e) {
            Log::error('Failed to send notification to role: ' . $e->getMessage());
            return false;
        }
    }

    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏•‡∏≤‡∏¢ Role
     */
    public static function notifyMultipleRoles($targetRoles, $type, $title, $message, $data = [], $priority = 'normal')
    {
        foreach ($targetRoles as $role) {
            self::notifyRole($role, $type, $title, $message, $data, $priority);
        }
    }

    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
     */
    public static function notifyUser($userId, $type, $title, $message, $data = [], $priority = 'normal')
    {
        try {
            $user = User::findOrFail($userId);

            Notification::create([
                'user_id' => $user->id,
                'target_role' => $user->role,
                'type' => $type,
                'title' => $title,
                'message' => $message,
                'data' => $data,
                'priority' => $priority
            ]);

            return true;
        } catch (\Exception $e) {
            Log::error('Failed to send notification to user: ' . $e->getMessage());
            return false;
        }
    }

    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà
     */
    public static function notifyNewPatient($medicalReport)
    {
        $soldier = $medicalReport->soldier;
        $riskLevel = $medicalReport->vitalSign->risk_level ?? 'unknown';
        
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞ target roles ‡∏ï‡∏≤‡∏° risk level
        $priority = match($riskLevel) {
            'red' => 'urgent',
            'yellow' => 'high',
            'green' => 'normal',
            default => 'normal'
        };

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î target roles ‡∏ï‡∏≤‡∏° risk level
        $targetRoles = match($riskLevel) {
            'red' => ['adminhospital'], // ‡πÄ‡∏Ñ‡∏™‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô -> Admin Hospital ‡πÅ‡∏•‡∏∞ ER
            'yellow' => ['adminhospital'], // ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á -> Admin Hospital ‡πÅ‡∏•‡∏∞ OPD
            'green' => ['adminhospital'], // ‡∏õ‡∏Å‡∏ï‡∏¥ -> Admin Hospital ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            default => ['adminhospital']
        };

        $riskText = match($riskLevel) {
            'red' => 'üî¥ ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
            'yellow' => 'üü° ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á', 
            'green' => 'üü¢ ‡∏õ‡∏Å‡∏ï‡∏¥',
            default => '‚ö™ ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'
        };

        $title = "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà - {$riskText}";
        $message = "‡∏ó‡∏´‡∏≤‡∏£ {$soldier->first_name} {$soldier->last_name} ".
        "‡∏à‡∏≤‡∏Å " . ($soldier->trainingUnit->unit_name ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πà‡∏ß‡∏¢') . " ".
        "‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤\n".
        "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£: {$medicalReport->symptom_description}";
        
        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° metadata ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
        $data = [
        'medical_report_id' => $medicalReport->id,
        'soldier_id' => $soldier->id,
        'soldier_name' => $soldier->first_name . ' ' . $soldier->last_name,
        'training_unit' => $soldier->trainingUnit->unit_name ?? null,
        'risk_level' => $riskLevel, // üö® ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
        'symptom' => $medicalReport->symptom_description,
        'created_at' => $medicalReport->created_at->toISOString(),
        'notification_date' => now()->format('Y-m-d') // üö® ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        ];


        // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á roles ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        return self::notifyMultipleRoles($targetRoles, 'new_patient', $title, $message, $data, $priority);
    }

    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
     */
    public static function notifyNewAppointment($appointment)
    {
        $medicalReport = $appointment->medicalReport;
        $soldier = $medicalReport->soldier;

        $title = "‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà";
        $message = "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {$soldier->first_name} {$soldier->last_name} ".
                  "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {$appointment->appointment_date->format('d/m/Y H:i')}";

        $data = [
            'appointment_id' => $appointment->id,
            'medical_report_id' => $medicalReport->id,
            'soldier_name' => $soldier->first_name . ' ' . $soldier->last_name,
            'appointment_date' => $appointment->appointment_date->toISOString(),
            'case_type' => $appointment->case_type
        ];

        $priority = $appointment->case_type === 'critical' ? 'urgent' : 'normal';
        
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î target roles ‡∏ï‡∏≤‡∏° case type
        $targetRoles = match($appointment->case_type) {
            'critical' => ['adminhospital', 'er'],
            'urgent' => ['adminhospital', 'opd'],
            default => ['adminhospital']
        };

        return self::notifyMultipleRoles($targetRoles, 'new_appointment', $title, $message, $data, $priority);
    }

    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ Admit
     */
    public static function notifyPatientAdmit($diagnosis)
    {
        $treatment = $diagnosis->treatment;
        $soldier = $treatment->checkin->appointment->medicalReport->soldier;

        $title = "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏ô (Admit)";
        $message = "‡∏ó‡∏´‡∏≤‡∏£ {$soldier->first_name} {$soldier->last_name} ".
                  "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Admit ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å {$diagnosis->department_type}";

        $data = [
            'diagnosis_id' => $diagnosis->id,
            'soldier_name' => $soldier->first_name . ' ' . $soldier->last_name,
            'department_type' => $diagnosis->department_type,
            'treatment_status' => $diagnosis->treatment_status
        ];

        // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Admin Hospital ‡πÅ‡∏•‡∏∞ IPD
        $targetRoles = ['adminhospital', 'ipd'];

        return self::notifyMultipleRoles($targetRoles, 'patient_admit', $title, $message, $data, 'high');
    }

    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
     */
    public static function notifyAppointmentRejected($appointment, $reason = '')
    {
        $medicalReport = $appointment->medicalReport;
        $soldier = $medicalReport->soldier;

        $title = "‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò";
        $message = "‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á {$soldier->first_name} {$soldier->last_name} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò" .
                  ($reason ? "\n‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {$reason}" : "");

        $data = [
            'appointment_id' => $appointment->id,
            'soldier_name' => $soldier->first_name . ' ' . $soldier->last_name,
            'reason' => $reason
        ];

        // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Training Unit
        return self::notifyRole('training_unit', 'appointment_rejected', $title, $message, $data, 'high');
    }

    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
     */
    public static function notifyTreatmentCompleted($diagnosis)
    {
        $treatment = $diagnosis->treatment;
        $soldier = $treatment->checkin->appointment->medicalReport->soldier;

        $title = "‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô";
        $message = "‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤ {$soldier->first_name} {$soldier->last_name} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß";

        $data = [
            'diagnosis_id' => $diagnosis->id,
            'soldier_name' => $soldier->first_name . ' ' . $soldier->last_name,
            'treatment_result' => $diagnosis->treatment_status
        ];

        // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Admin Hospital ‡πÅ‡∏•‡∏∞ Training Unit
        $targetRoles = ['adminhospital', 'training_unit'];

        return self::notifyMultipleRoles($targetRoles, 'treatment_completed', $title, $message, $data, 'normal');
    }

    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö Broadcast ‡πÑ‡∏õ‡∏ó‡∏∏‡∏Å Role
     */
    public static function broadcastNotification($type, $title, $message, $data = [], $priority = 'normal', $excludeRoles = [])
    {
        $allRoles = array_keys(Notification::ROLES);
        $targetRoles = array_diff($allRoles, $excludeRoles);

        return self::notifyMultipleRoles($targetRoles, $type, $title, $message, $data, $priority);
    }

    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
     */
    public static function notifySystemAlert($alertType, $message, $severity = 'high')
    {
        $title = "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏ö";
        
        $data = [
            'alert_type' => $alertType,
            'timestamp' => now()->toISOString(),
            'severity' => $severity
        ];

        // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        return self::notifyRole('admin', 'system_alert', $title, $message, $data, $severity === 'critical' ? 'urgent' : 'high');
    }
}