<?php

namespace App\Http\Controllers;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\Request;
use App\Models\Soldier;
use App\Models\Rotation;
use App\Models\TrainingUnit;
use App\Models\MedicalDiagnosis;
use App\Models\Assessment;
use App\Models\AppointmentMentalHealth;
use App\Models\AssessmentStatusTracking;
use App\Models\AssessmentScore;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Session; // ‚≠êÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
use App\Models\Appointment;
use App\Models\MedicalReport; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Auth;


class SoldierController extends Controller
{
    private $assessmentSequence = [
        'depression',
        'suicide_risk',
        'alcohol',
        'smoking',
        'drug_use'
    ];
    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏´‡∏≤‡∏£
     */
    public function showLoginForm()
    {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏•‡∏¢
        if (Session::has('soldier_id')) {
            return redirect()->route('profile.inv.soldier', ['id' => Session::get('soldier_id')]);
        }
        return view('soldier.login');
    }

    /**
     * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏´‡∏≤‡∏£ (Authenticate)
     */
    public function authenticate(Request $request)
    {
        $request->validate(['soldier_id_card' => 'required|string|max:13']);

        $soldier = Soldier::where('soldier_id_card', $request->soldier_id_card)->first();

        if ($soldier) {
            Session::put('soldier_id', $soldier->id);

            if ($soldier->consent_accepted == 0) {
                // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
                return redirect()->route('soldier.edit_personal_info', ['id' => $soldier->id])
                                 ->with('info', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì');
            } else {
                // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
                return redirect()->route('profile.inv.soldier', ['id' => $soldier->id]);
            }
        }

        return redirect()->route('soldier.login')
                         ->with('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏´‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô');
    }

    public function totalSoldiers()
    {
        // Get the total count of soldiers
        $totalSoldiers = Soldier::count();

        return view('admin.dashboardadmin', compact('totalSoldiers'));
    }
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏´‡∏≤‡∏£ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ù‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Active
    public function create_soldier()
    {
        $rotations = Rotation::where('status', 'active')->get(); // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏•‡∏±‡∏î‡∏ó‡∏µ‡πà Active
        $units = TrainingUnit::where('status', 'active')->get(); // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ù‡∏∂‡∏Å‡∏ó‡∏µ‡πà Active

        return view('admin.add_soldier_form', compact('rotations', 'units'));
    }


    public function store_soldier(Request $request)
    {
        $request->validate([
            'soldier_id_card' => 'required|string|max:13|unique:soldier,soldier_id_card',
            'first_name' => 'required|string|max:48',
            'last_name' => 'required|string|max:48',
            'rotation_id' => 'required|exists:rotation,id',
            'training_unit_id' => 'required|exists:training_unit,id',
            'affiliated_unit' => 'nullable|string|max:48',
            'weight_kg' => 'nullable|numeric|min:30|max:150',
            'height_cm' => 'nullable|integer|min:120|max:250',
            'medical_allergy_food_history' => 'nullable|string',
            'underlying_diseases' => 'nullable|string',
            'selection_method' => 'required|string|max:48',
            'service_duration' => 'required|integer|min:1|max:60',
            'soldier_image' => 'nullable|image|mimes:jpeg,png,jpg|max:2048' // ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        ]);

        $imagePath = null;
        $uploadDir = public_path('uploads/soldiers'); // ‚úÖ ‡πÉ‡∏ä‡πâ public_path('uploads/soldiers') ‡∏ï‡∏£‡∏á‡πÜ

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if ($request->hasFile('soldier_image')) {
            $image = $request->file('soldier_image');
            $filename = time() . '.' . $image->getClientOriginalExtension();
            $image->move($uploadDir, $filename);
            $imagePath = 'uploads/soldiers/' . $filename;
        }

        Soldier::create([
            'soldier_id_card' => $request->soldier_id_card,
            'first_name' => $request->first_name,
            'last_name' => $request->last_name,
            'rotation_id' => $request->rotation_id,
            'training_unit_id' => $request->training_unit_id,
            'affiliated_unit' => $request->affiliated_unit,
            'weight_kg' => $request->weight_kg,
            'height_cm' => $request->height_cm,
            'medical_allergy_food_history' => $request->medical_allergy_food_history,
            'underlying_diseases' => $request->underlying_diseases,
            'selection_method' => $request->selection_method,
            'service_duration' => $request->service_duration,
            'soldier_image' => $imagePath // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        ]);

        return redirect('/soldier')->with('success', '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏´‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
    }


    public function delete_soldier($id)
    {
        $soldier = Soldier::find($id);

        if (!$soldier) {
            return redirect()->back()->with('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö');
        }

        $soldier->delete();

        return redirect()->back()->with('success', '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏´‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    }
    public function edit_soldier($id)
    {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        $soldier = Soldier::find($id);

        if (!$soldier) {
            return redirect()->back()->with('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏´‡∏≤‡∏£');
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Rotation) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Drop-down
        $rotations = Rotation::all();

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ù‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Training Unit) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Drop-down
        $training_units = TrainingUnit::all();

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á View (Blade Template) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        return view('admin.soldier_edit', compact('soldier', 'rotations', 'training_units'));
    }

    // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏´‡∏≤‡∏£
    public function update_soldier(Request $request, $id)
    {
        $soldier = Soldier::find($id);

        if (!$soldier) {
            return redirect()->back()->with('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏´‡∏≤‡∏£');
        }

        $request->validate([
            'first_name' => 'required|string|max:48',
            'last_name' => 'required|string|max:48',
            'rotation_id' => 'nullable|integer|exists:rotation,id',
            'training_unit_id' => 'nullable|integer|exists:training_unit,id',
            'affiliated_unit' => 'nullable|string|max:48',
            'weight_kg' => 'nullable|numeric|min:30|max:200',
            'height_cm' => 'nullable|integer|min:100|max:250',
            'medical_allergy_food_history' => 'nullable|string|max:255',
            'underlying_diseases' => 'nullable|string|max:255',
            'selection_method' => 'nullable|string|max:48',
            'service_duration' => 'nullable|integer|min:1|max:60',
            'soldier_image' => 'nullable|image|mimes:jpeg,png,jpg|max:2048'
        ]);

        $imagePath = $soldier->soldier_image; // ‡πÉ‡∏ä‡πâ path ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
        $uploadDir = public_path('uploads/soldiers'); // ‚úÖ ‡πÉ‡∏ä‡πâ public_path('uploads/soldiers') ‡∏ï‡∏£‡∏á‡πÜ

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if ($request->hasFile('soldier_image')) {
            $image = $request->file('soldier_image');
            $filename = time() . '.' . $image->getClientOriginalExtension();

            if (!empty($soldier->soldier_image)) {
                $oldImagePath = public_path($soldier->soldier_image);
                if (file_exists($oldImagePath) && is_file($oldImagePath)) {
                    unlink($oldImagePath);
                }
            }

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            if (!is_dir($uploadDir)) {
                mkdir($uploadDir, 0775, true);
            }

            // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏ó‡∏µ‡πà public/uploads/soldiers/
            $image->move($uploadDir, $filename);

            // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï path ‡πÉ‡∏´‡∏°‡πà
            $imagePath = 'uploads/soldiers/' . $filename;
        }

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç `soldier_image` ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
        $soldier->update([
            'first_name' => $request->first_name,
            'last_name' => $request->last_name,
            'rotation_id' => $request->rotation_id,
            'training_unit_id' => $request->training_unit_id,
            'affiliated_unit' => $request->affiliated_unit,
            'weight_kg' => $request->weight_kg,
            'height_cm' => $request->height_cm,
            'medical_allergy_food_history' => $request->medical_allergy_food_history,
            'underlying_diseases' => $request->underlying_diseases,
            'selection_method' => $request->selection_method,
            'service_duration' => $request->service_duration,
            'soldier_image' => $imagePath // ‚úÖ ‡πÉ‡∏ä‡πâ path ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
        ]);

        return redirect()->route('soldier.edit_soldier', $id)->with('success', '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏´‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    }

    public function getImage($id)
    {
        $soldier = Soldier::find($id);

        if (!$soldier || !$soldier->soldier_image) {
            return response()->json(['message' => 'Image not found'], 404);
        }

        // ‡πÉ‡∏ä‡πâ public_path() ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        $imagePath = public_path($soldier->soldier_image);

        if (!file_exists($imagePath)) {
            return response()->json(['message' => 'Image not found'], 404);
        }

        return response()->file($imagePath, [
            'Content-Type' => mime_content_type($imagePath)
        ]);
    }

    public function view_soldier($id)
    {
        $soldier = Soldier::with(['rotation', 'trainingUnit'])->find($id);

        if (!$soldier) {
            return redirect()->back()->with('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏´‡∏≤‡∏£');
        }

        return view('admin.soldier_profile', compact('soldier'));
    }

    public function getSoldierImageAttribute($value)
    {
        return asset('uploads/soldiers/' . basename($value)); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å public/uploads/soldiers/
    }


    public function showInvProfile($id)
    {
        // ‡πÉ‡∏ä‡πâ findOrFail ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á
        $soldier = Soldier::with(['rotation', 'trainingUnit','mentalHealthTracking.appointments.treatment'])->findOrFail($id);

        // ---  ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏î‡πâ‡∏ß‡∏¢ Eloquent (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
        $recentHistories = $soldier->assessmentScores()
            ->with('assessmentType')
            ->get()
            ->unique(function ($item) {
                return optional($item->assessmentType)->assessment_type;
            });

        // --- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
        $medicalHistory = DB::table('medical_diagnosis as md')
            ->join('treatment as t', 'md.treatment_id', '=', 't.id')
            ->join('checkin as c', 't.checkin_id', '=', 'c.id')
            ->join('appointment as a', 'c.appointment_id', '=', 'a.id')
            ->join('medical_report as mr', 'a.medical_report_id', '=', 'mr.id')
            ->leftJoin('vital_signs as vs', 'md.vital_signs_id', '=', 'vs.id')
            ->leftJoin(DB::raw('(SELECT medical_diagnosis_id, GROUP_CONCAT(DISTINCT icd10_diseases.icd10_code SEPARATOR ", ") as icd10_codes, GROUP_CONCAT(DISTINCT icd10_diseases.disease_name_en SEPARATOR "; ") as disease_names FROM medical_diagnosis_diseases JOIN icd10_diseases ON medical_diagnosis_diseases.icd10_disease_id = icd10_diseases.id GROUP BY medical_diagnosis_id) as diseases'), 'md.id', '=', 'diseases.medical_diagnosis_id')
            ->where('mr.soldier_id', $soldier->id)
            ->select('md.id', 'mr.symptom_description', 'md.doctor_name', 'md.department_type', 'md.treatment_status', 'md.diagnosis_date', 'vs.temperature', 'vs.blood_pressure', 'vs.heart_rate', 'diseases.icd10_codes', 'diseases.disease_names')
            ->groupBy('md.id', 'mr.symptom_description', 'md.doctor_name', 'md.department_type', 'md.treatment_status', 'md.diagnosis_date', 'vs.temperature', 'vs.blood_pressure', 'vs.heart_rate', 'diseases.icd10_codes', 'diseases.disease_names')
            ->orderBy('md.diagnosis_date', 'desc')
            ->get();

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type Labels ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô View
        $typeLabels = [
            'smoking' => '‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà',
            'drug_use' => '‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î',
            'alcohol' => '‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå',
            'depression' => '‡∏†‡∏≤‡∏ß‡∏∞‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤',
            'suicide_risk' => '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢',
        ];

        // --- ‚úÖ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà View ---
        return view('soldier.profile_inv_soldier', compact('soldier', 'recentHistories', 'medicalHistory', 'typeLabels'));
    }


    public function getDiagnosisDetails($id)
    {
        // ‡πÉ‡∏ä‡πâ Query ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        $diagnosisDetail = DB::table('medical_diagnosis as md')
            ->leftJoin('treatment as t', 'md.treatment_id', '=', 't.id')
            ->leftJoin('checkin as c', 't.checkin_id', '=', 'c.id')
            ->leftJoin('appointment as a', 'c.appointment_id', '=', 'a.id')
            ->leftJoin('medical_report as mr', 'a.medical_report_id', '=', 'mr.id')
            ->leftJoin(DB::raw('(SELECT medical_diagnosis_id, GROUP_CONCAT(DISTINCT icd10_diseases.icd10_code, ": ", icd10_diseases.disease_name_en SEPARATOR "|") as diseases FROM medical_diagnosis_diseases JOIN icd10_diseases ON medical_diagnosis_diseases.icd10_disease_id = icd10_diseases.id GROUP BY medical_diagnosis_id) as diseases'), 'md.id', '=', 'diseases.medical_diagnosis_id')
            ->where('md.id', $id)
            ->select(
                'md.department_type',
                'md.doctor_name',
                'md.treatment_status',
                'md.training_instruction', // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å
                'mr.symptom_description',  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏£
                'diseases.diseases'
            )
            ->first();

        if (!$diagnosisDetail) {
            return response()->json(['error' => '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'], 404);
        }

        // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• diseases ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô array
        if ($diagnosisDetail->diseases) {
            $diagnosisDetail->diseases = explode('|', $diagnosisDetail->diseases);
        } else {
            $diagnosisDetail->diseases = [];
        }

        return response()->json($diagnosisDetail);
    }


    public function authenticateSoldier(Request $request)
    {
        $request->validate([
            'soldier_id_card' => 'required|digits:13'
        ]);

        $soldier = Soldier::where('soldier_id_card', $request->soldier_id_card)->first();

        if (!$soldier) {
            return redirect()->back()->with('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏´‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô');
        }

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å soldier_id ‡∏•‡∏á session
        session(['soldier_id' => $soldier->id]);

        // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        return redirect()->route('soldier.individual', ['id' => $soldier->id]);
    }


    public function individual_soldier($id)
    {
        $soldier = Soldier::with(['rotation', 'trainingUnit'])->find($id);

        if (!$soldier) {
            return redirect()->route('soldier.login')->with('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏´‡∏≤‡∏£');
        }

        return view('soldier.profile_inv_soldier', compact('soldier'));
    }


    public function acceptConsent(Request $request, $id){
    $soldier = Soldier::findOrFail($id);
    $soldier->consent_accepted = true;
    $soldier->save();

    return response()->json(['status' => 'success', 'message' => 'Consent accepted successfully']);
    }


    public function showMedicalHistory($soldierId)
    {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        $soldier = Soldier::find($soldierId);

        if (!$soldier) {
            return redirect()->back()->with('error', '‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏û‡∏ö');
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ó‡∏´‡∏≤‡∏£
        $medicalDiagnoses = MedicalDiagnosis::whereHas('treatment', function ($query) use ($soldierId) {
            $query->where('soldier_id', $soldierId);
        })->with(['diseases', 'vitalSigns'])->get();

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ß‡∏¥‡∏ß
        return view('admin.soldier_profile', [
            'soldier' => $soldier,  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏´‡∏≤‡∏£
            'medicalDiagnoses' => $medicalDiagnoses // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
        ]);
    }

    // ‡πÉ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™ SoldierController

public function dashboard($id)
{
    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏´‡∏≤‡∏£
    $soldier = \App\Models\Soldier::findOrFail($id);

    // --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ ---
    // 2.1 ‡∏î‡∏∂‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏¢ (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)
    $physicalAppointments = \App\Models\Appointment::whereHas('medicalReport', function ($query) use ($id) {
                                $query->where('soldier_id', $id);
                            })
                            ->get()->map(function ($item) {
                                return (object) [
                                    'date' => $item->appointment_date,
                                    'description' => $item->appointment_location,
                                    'type' => '‡∏Å‡∏≤‡∏¢',
                                    'status' => $item->status
                                ];
                            });

    // ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏¥‡∏ï ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è
    // 2.2 ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° (id) ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ó‡∏´‡∏≤‡∏£‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
    $trackingIds = \App\Models\AssessmentStatusTracking::where('soldier_id', $id)->pluck('id');

    // 2.3 ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ ‡πÑ‡∏õ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï‡∏î‡πâ‡∏ß‡∏¢ Foreign Key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    $mentalAppointments = \App\Models\AppointmentMentalHealth::whereIn('status_tracking_id', $trackingIds)
                            ->get()->map(function ($item) {
                                return (object) [
                                    'date' => $item->appointment_date,
                                    'description' => $item->amh_symptoms,
                                    'type' => '‡∏à‡∏¥‡∏ï‡πÉ‡∏à',
                                    'status' => $item->status
                                ];
                            });

    // 2.4 ‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    $allAppointments = $physicalAppointments->concat($mentalAppointments)
                        ->sortByDesc('date')
                        ->take(5);


    // --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤ ---
    // 3.1 ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡∏≤‡∏¢ (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)
    $physicalHistory = \App\Models\Appointment::where('status', 'completed')
                        ->whereHas('medicalReport', function ($query) use ($id) {
                            $query->where('soldier_id', $id);
                        })->get()->map(function ($item) {
                            return (object) [
                                'date' => $item->appointment_date,
                                'description' => '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà: ' . $item->appointment_location,
                                'type' => '‡∏Å‡∏≤‡∏¢'
                            ];
                        });

    // 3.2 ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏à‡∏¥‡∏ï (‡πÉ‡∏ä‡πâ $trackingIds ‡πÅ‡∏•‡∏∞ Foreign Key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
    $mentalHistory = \App\Models\AppointmentMentalHealth::where('status', 'completed')
                        ->whereIn('status_tracking_id', $trackingIds)
                        ->get()->map(function ($item) {
                            return (object) [
                                'date' => $item->appointment_date,
                                'description' => $item->amh_symptoms,
                                'type' => '‡∏à‡∏¥‡∏ï‡πÉ‡∏à'
                            ];
                        });

    // 3.3 ‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
    $treatmentHistory = $physicalHistory->concat($mentalHistory)
                            ->sortByDesc('date')
                            ->take(5);


    // --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô ---
    $recentHistories = \App\Models\AssessmentScore::with('assessmentType')
                        ->where('soldier_id', $id)
                        ->latest('created_at')
                        ->limit(5)
                        ->get();

    // --- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà View ---
    return view('soldier.dashboard', compact(
        'soldier',
        'allAppointments',
        'treatmentHistory',
        'recentHistories'
    ));
}


    // ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á
    public function editPersonalInfo($id)
    {
        $soldier = Soldier::findOrFail($id);
        return view('soldier.edit_personal_info', compact('soldier'));
    }

   // ‡πÉ‡∏ô SoldierController.php

public function updatePersonalInfo(Request $request, $id)
{
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    $request->validate([
        'first_name' => 'required|string|max:48',
        'last_name' => 'required|string|max:48',
        'weight_kg' => 'nullable|numeric',
        'height_cm' => 'nullable|integer',
        'medical_allergy_food_history' => 'nullable|string',
        'underlying_diseases' => 'nullable|string',
        'soldier_image' => 'nullable|image|mimes:jpeg,png,jpg|max:2048'
    ]);

    $soldier = Soldier::findOrFail($id);

    // 2. ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    $imagePath = $soldier->soldier_image;
    if ($request->hasFile('soldier_image')) {
        $uploadDir = public_path('uploads/soldiers');
        if (!is_dir($uploadDir)) {
            mkdir($uploadDir, 0775, true);
        }
        $image = $request->file('soldier_image');
        $filename = time() . '.' . $image->getClientOriginalExtension();
        $image->move($uploadDir, $filename);
        $imagePath = 'uploads/soldiers/' . $filename;
    }

    // 3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    $soldier->update([
        'first_name' => $request->first_name,
        'last_name' => $request->last_name,
        'weight_kg' => $request->weight_kg,
        'height_cm' => $request->height_cm,
        'medical_allergy_food_history' => $request->medical_allergy_food_history,
        'underlying_diseases' => $request->underlying_diseases,
        'soldier_image' => $imagePath,
        'consent_accepted' => 1,
    ]);

    // ‚úÖ 4. [‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Redirect
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ä‡∏∏‡∏î‡πÅ‡∏£‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (!$soldier->initial_assessment_complete) {
        // Flow ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å: ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
        // ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏£‡∏Å
        return redirect()->route('assessment.show', ['soldier_id' => $soldier->id, 'type' => 'smoking'])
                         ->with('info', '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô');
    } else {
        // Flow ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß
        // ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        return redirect()->route('soldier.edit_personal_info', ['id' => $soldier->id])
                         ->with('success', '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    }
}
public function myAppointments($id)
{
    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏´‡∏≤‡∏£ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ)
    $soldier = \App\Models\Soldier::findOrFail($id);

    // --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ ---
    // 2.1 ‡∏î‡∏∂‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏¢
    $physicalAppointments = \App\Models\Appointment::whereHas('medicalReport', function ($query) use ($id) {
                                $query->where('soldier_id', $id);
                            })
                            ->get()->map(function ($item) {
                                return (object) [
                                    'appointment_date' => $item->appointment_date,
                                    'appointment_location' => $item->appointment_location,
                                    'case_type' => $item->case_type,
                                    'status' => $item->status,
                                    'type' => '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏¢',
                                    'reason' => $item->medicalReport->mr_Symptoms ?? '‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏¢'
                                ];
                            });

    // 2.2 ‡∏î‡∏∂‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏¥‡∏ï
    $trackingIds = \App\Models\AssessmentStatusTracking::where('soldier_id', $id)->pluck('id');
    $mentalAppointments = \App\Models\AppointmentMentalHealth::whereIn('status_tracking_id', $trackingIds)
                        ->get()->map(function ($item) {
                            return (object) [
                                'appointment_date' => $item->appointment_date,
                                'appointment_location' => $item->appointment_location ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà', // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
                                'case_type' => 'normal',
                                'status' => $item->status,
                                'type' => '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï',
                                'reason' => $item->amh_symptoms
                            ];
                        });

    // 2.3 ‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    $allAppointments = $physicalAppointments->concat($mentalAppointments)
                        ->sortByDesc('appointment_date');

    // 3. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà View
    return view('soldier.my_appointments', compact('soldier', 'allAppointments'));
}

}
