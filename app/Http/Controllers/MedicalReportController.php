<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\MedicalReport;
use App\Models\Soldier;
use App\Models\TrainingUnit;
use App\Models\MedicalReportImage;
use Illuminate\Support\Facades\Log;

use App\Models\Appointment;

use App\Models\VitalSign;

class MedicalReportController extends Controller
{
    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå

    public function showMedicalReportForm($id)
    {
        $unit = TrainingUnit::findOrFail($id);
        $soldiers = Soldier::where('training_unit_id', $id)->get();

        return view('trainingUnit.create_medicalReport', compact('unit', 'soldiers'));
    }



    public function saveMedicalReport(Request $request)
    {
        try {
            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            $request->validate([
                'soldier_id' => 'required|exists:soldier,id',
                'symptom_description' => 'required|string',
                'pain_score' => 'nullable|integer|min:0|max:10',
                'temperature' => 'nullable|numeric|min:30|max:45',
                'blood_pressure' => 'nullable|string|regex:/^\d{2,3}\/\d{2,3}$/',
                'heart_rate' => 'nullable|integer|min:40|max:180',
                'atk_test_results' => 'nullable|array',
                'atk_test_results.*' => 'nullable|image|mimes:jpeg,png,jpg|max:2048',
                'symptom_images' => 'nullable|array',
                'symptom_images.*' => 'nullable|image|mimes:jpeg,png,jpg|max:2048',
            ]);

            // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Error ‡∏´‡∏≤‡∏Å blood_pressure ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
            $systolic = null;
            $diastolic = null;
            if (!empty($request->blood_pressure) && strpos($request->blood_pressure, "/") !== false) {
                list($systolic, $diastolic) = explode("/", $request->blood_pressure);
            }

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ blood_pressure)
            $riskLevel = 'green'; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            if ($systolic !== null && $diastolic !== null) {
                $riskLevel = $this->calculateRiskLevel((int) $systolic, (int) $diastolic, $request->temperature);
            }

            // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô 'yellow' ‡∏´‡∏£‡∏∑‡∏≠ 'red' ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ status ‡πÄ‡∏õ‡πá‡∏ô 'in ER'
            $status = 'pending'; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å risk level ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô green ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 'pending'
            if ($riskLevel === 'yellow' || $riskLevel === 'red') {
                $status = 'in ER';
            }

            // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï (vital signs) (‡πÅ‡∏ï‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô null ‡πÑ‡∏î‡πâ)
            $vitalSign = VitalSign::create([
                'temperature' => $request->temperature ?? null,
                'blood_pressure' => $request->blood_pressure ?? null,
                'heart_rate' => $request->heart_rate ?? null,
                'source' => 'appointment',
                'risk_level' => $riskLevel,
            ]);

            // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Medical Report
            $report = MedicalReport::create([
                'soldier_id' => $request->soldier_id,
                'symptom_description' => $request->symptom_description,
                'pain_score' => $request->pain_score ?? null,
                'vital_signs_id' => $vitalSign->id ?? null,
                'status' => $status, // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ status ‡πÄ‡∏õ‡πá‡∏ô 'in ER' ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô 'yellow' ‡∏´‡∏£‡∏∑‡∏≠ 'red', ‡∏´‡∏£‡∏∑‡∏≠ 'pending' ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô green ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å
            ]);

            Log::info('Medical Report Created Successfully: ', ['report' => $report]);

            // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ ATK
            if ($request->hasFile('atk_test_results')) {
                foreach ($request->file('atk_test_results') as $file) {
                    $atkFilename = time() . '_' . $file->getClientOriginalName();
                    $file->move(public_path('uploads/medical_reports/atk'), $atkFilename);

                    MedicalReportImage::create([
                        'medical_report_id' => $report->id,
                        'image_type' => 'atk',
                        'image_symptom' => 'uploads/medical_reports/atk/' . $atkFilename,
                    ]);
                }
            }

            // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£
            if ($request->hasFile('symptom_images')) {
                foreach ($request->file('symptom_images') as $file) {
                    $symptomFilename = time() . '_' . $file->getClientOriginalName();
                    $file->move(public_path('uploads/medical_reports/symptoms'), $symptomFilename);

                    MedicalReportImage::create([
                        'medical_report_id' => $report->id,
                        'image_type' => 'symptom',
                        'image_symptom' => 'uploads/medical_reports/symptoms/' . $symptomFilename,
                    ]);
                }
            }

            // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á wait_appointment ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° success
            return response()->json([
                'success' => true,
                'message' => '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!‡∏´‡∏Å‡∏Å',
                'redirect' => route('wait_appointment') // ‚úÖ ‡∏™‡πà‡∏á URL ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
            ]);

        } catch (\Exception $e) {
            Log::error('Error saving medical report: ' . $e->getMessage());

            // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏´‡πâ redirect ‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á error message
            return redirect()->back()->with('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î! ' . $e->getMessage());
        }
    }





    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Risk Level ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï
    private function calculateRiskLevel($systolic, $diastolic, $temperature)
    {
        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô (‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á)
        if ($temperature > 40) {
            return 'red'; // üî¥ ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡πÑ‡∏Ç‡πâ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 40¬∞C
        } elseif ($temperature > 38) {
            return 'yellow'; // üü° ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á ‡πÑ‡∏Ç‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 38¬∞C
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï
        if ($systolic >= 180 || $diastolic >= 120) {
            return 'red'; // üî¥ ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô Hypertensive Crisis
        } elseif ($systolic >= 140 || $diastolic >= 90) {
            return 'red'; // üî¥ ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ Hypertension Stage 2
        } elseif ($systolic >= 121 || $diastolic >= 81) {
            return 'yellow'; // üü° ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á Hypertension Stage 1
        } elseif ($systolic < 90 || $diastolic < 60) {
            return 'yellow'; // üü° ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ï‡πà‡∏≥
        }

        return 'green'; // üü¢ ‡∏õ‡∏Å‡∏ï‡∏¥
    }
    public function showWaitAppointment()
    {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• medicalReports ‡∏û‡∏£‡πâ‡∏≠‡∏° appointment, soldier, ‡πÅ‡∏•‡∏∞ images
        $medicalReports = MedicalReport::with(['appointment', 'soldier', 'images'])->get();

        // Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á appointment ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á status ‡πÅ‡∏•‡∏∞ case_type
        foreach ($medicalReports as $report) {
            Log::info('Appointment Data:', [
                'status' => $report->appointment->status ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
                'case_type' => $report->appointment->case_type ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Ñ‡∏™',
            ]);
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ scheduled ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        $hasScheduled = $medicalReports->contains(function ($report) {
            return $report->appointment && $report->appointment->status === 'scheduled';
        });

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á view
        return view('trainingUnit.wait_appointment', compact('medicalReports', 'hasScheduled'));
    }


    public function updateStatus(Request $request)
    {
        $request->validate([
            'ids' => 'required|array',
            'status' => 'required|string'
        ]);

        try {
            MedicalReport::whereIn('id', $request->ids)->update(['status' => $request->status]);

            return response()->json(["status" => "success"]);
        } catch (\Exception $e) {
            return response()->json(["status" => "error", "message" => $e->getMessage()]);
        }
    }



    public function waitAppointment(Request $request)
    {
        $selectedStatus = $request->query('status', 'pending');

        $query = MedicalReport::with(['soldier.rotation', 'soldier.trainingUnit', 'appointment']);

        if ($selectedStatus === 'scheduled') {
            // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ MedicalReport ‡∏ó‡∏µ‡πà‡∏°‡∏µ appointment ‡πÅ‡∏•‡∏∞ status = scheduled
            $query->whereHas('appointment', function ($q) {
                $q->where('status', 'scheduled');
            });
        } else {
            // ‡πÉ‡∏ä‡πâ medical_report.status ‡∏õ‡∏Å‡∏ï‡∏¥
            $query->where('status', $selectedStatus);
        }

        $medicalReports = $query->orderBy('created_at', 'desc')->get();

        return view('trainingUnit.wait_appointment', [
            'medicalReports' => $medicalReports,
            'selectedStatus' => $selectedStatus,
        ]);
    }


    public function sentAppointments()
    {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'sent' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        $medicalReports = MedicalReport::whereRaw("LOWER(status) = 'sent'")->get();

        // ‡∏™‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÑ‡∏õ‡∏¢‡∏±‡∏á View
        return view('trainingUnit.wait_hospital_appointment', compact('medicalReports'));
    }


    public function getMedicalReport($id)
    {
        $medicalReport = MedicalReport::with('images', 'soldier', 'vitalSign')->find($id);

        if (!$medicalReport) {
            return response()->json(['success' => false, 'message' => '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•']);
        }

        return response()->json([
            'success' => true,
            'soldier_name' => $medicalReport->soldier->first_name . ' ' . $medicalReport->soldier->last_name,
            'soldier_unit' => $medicalReport->soldier->affiliated_unit,
            'soldier_rotation' => $medicalReport->soldier->rotation->rotation_name ?? '-',
            'soldier_training' => $medicalReport->soldier->training_unit,
            'temperature' => $medicalReport->vitalSign->temperature ?? '-',
            'blood_pressure' => $medicalReport->vitalSign->blood_pressure ?? '-',
            'heart_rate' => $medicalReport->vitalSign->heart_rate ?? '-',
            'pain_score' => $medicalReport->pain_score ?? '-',
            'symptom_description' => $medicalReport->symptom_description ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
            'risk_level' => $medicalReport->vitalSign->risk_level, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• risk_level

            'images' => [
                'atk' => $medicalReport->images->where('image_type', 'atk')->pluck('image_symptom')->map(fn($image) => asset($image))->toArray(),
                'symptom' => $medicalReport->images->where('image_type', 'symptom')->pluck('image_symptom')->map(fn($image) => asset($image))->toArray(),
            ]
        ]);
    }





    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ù‡∏∂‡∏Å


}

